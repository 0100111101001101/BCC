//
//  MessagesViewController.swift
//  BCCAppExtension MessagesExtension
//
//  Created by Om Mandavia on 10/6/2022.
//

import UIKit
import Messages

class MessagesViewController: MSMessagesAppViewController, UITableViewDelegate, UITableViewDataSource {
    
    // Initialising a table view to show all the preset messages
    let messagesTableView = UITableView()
    
    // Initialising the constants
    let APP_GROUP_NAME = "group.com.om.mandavia.bcc"
    
    var allMessages = [String]()
    
    // MARK: - Lifecycle methods
    
    override func viewDidLoad() {
        super.viewDidLoad()
        // setting the the current view controller as table view delegates
        messagesTableView.delegate = self
        messagesTableView.dataSource = self
        
        configureTableView()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        // Updating the object data to make sure that it is up-to-date
        allMessages = UserDefaults(suiteName: APP_GROUP_NAME)?.stringArray(forKey: "allMessages") ?? [String]()
        messagesTableView.reloadData()
    }
    
    // MARK: - AutoLayout methods
    
    func configureTableView(){
        view.addSubview(messagesTableView)
        messagesTableView.rowHeight = 50
        messagesTableView.translatesAutoresizingMaskIntoConstraints = false

        // Adding contraints on all four sides with respect to the content view
        messagesTableView.topAnchor.constraint(equalTo: view.topAnchor).isActive = true
        messagesTableView.leadingAnchor.constraint(equalTo: view.leadingAnchor).isActive = true
        messagesTableView.bottomAnchor.constraint(equalTo: view.bottomAnchor).isActive = true
        messagesTableView.trailingAnchor.constraint(equalTo: view.trailingAnchor).isActive = true
    }
    
    // MARK: - Table View Delegate Methods
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return !allMessages.isEmpty ? allMessages.count : 1      // ternary operator to set min value as 1
    }
    
    func numberOfSections(in tableView: UITableView) -> Int {
        return 1
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = UITableViewCell(style: .default, reuseIdentifier: nil)
        var content = cell.defaultContentConfiguration()
        
        if !allMessages.isEmpty {
            content.text = allMessages[indexPath.row]
            cell.selectionStyle = .default
        } else {
            // letting the user know that there are no preset data
            content.text = "No preset messages have been added."
            cell.selectionStyle = .none
        }
        cell.contentConfiguration = content
        return cell
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        if !allMessages.isEmpty {
            // sending the selected message to the active conversation
            activeConversation?.sendText(allMessages[indexPath.row])
            messagesTableView.deselectRow(at: indexPath, animated: true)
            
            // resetting the presentation style to compact
            requestPresentationStyle(.compact)
        }
    }
    
    // MARK: - Conversation Handling
    
    override func willBecomeActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the inactive to active state.
        // This will happen when the extension is about to present UI.
        
        // Use this method to configure the extension and restore previously stored state.
    }
    
    override func didResignActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the active to inactive state.
        // This will happen when the user dismisses the extension, changes to a different
        // conversation or quits Messages.
        
        // Use this method to release shared resources, save user data, invalidate timers,
        // and store enough state information to restore your extension to its current state
        // in case it is terminated later.
    }
   
    override func didReceive(_ message: MSMessage, conversation: MSConversation) {
        // Called when a message arrives that was generated by another instance of this
        // extension on a remote device.
        
        // Use this method to trigger UI updates in response to the message.
    }
    
    override func didStartSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user taps the send button.
    }
    
    override func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user deletes the message without sending it.
    
        // Use this to clean up state related to the deleted message.
    }
    
    override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called before the extension transitions to a new presentation style.
    
        // Use this method to prepare for the change in presentation style.
    }
    
    override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called after the extension transitions to a new presentation style.
    
        // Use this method to finalize any behaviors associated with the change in presentation style.
    }

}
